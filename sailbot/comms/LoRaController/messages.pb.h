/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Mode {
    int32_t mode;
/* @@protoc_insertion_point(struct:Mode) */
} Mode;


typedef struct _PowerStatus {
    int32_t batteryVoltage;
/* @@protoc_insertion_point(struct:PowerStatus) */
} PowerStatus;


typedef struct _RudderCommand {
    int32_t position;
/* @@protoc_insertion_point(struct:RudderCommand) */
} RudderCommand;


typedef struct _SailCommand {
    int32_t position;
/* @@protoc_insertion_point(struct:SailCommand) */
} SailCommand;


typedef struct _SailStatus {
    int32_t sailPosition;
    int32_t rudderPosition;
/* @@protoc_insertion_point(struct:SailStatus) */
} SailStatus;


typedef struct _SkipperCommand {
    int32_t sailPosition;
    int32_t rudderPosition;
/* @@protoc_insertion_point(struct:SkipperCommand) */
} SkipperCommand;


typedef struct _BaseToBoat {
    pb_size_t which_command;
    union {
        SkipperCommand skipper;
        SailCommand sail;
        RudderCommand rudder;
        Mode mode;
    } command;
/* @@protoc_insertion_point(struct:BaseToBoat) */
} BaseToBoat;


typedef struct _BoatToBase {
    pb_size_t which_command;
    union {
        SailStatus sails;
        PowerStatus power;
    } command;
/* @@protoc_insertion_point(struct:BoatToBase) */
} BoatToBase;


/* Initializer values for message structs */
#define SkipperCommand_init_default              {0, 0}
#define SailCommand_init_default                 {0}
#define RudderCommand_init_default               {0}
#define Mode_init_default                        {0}
#define BaseToBoat_init_default                  {0, {SkipperCommand_init_default}}
#define SailStatus_init_default                  {0, 0}
#define PowerStatus_init_default                 {0}
#define BoatToBase_init_default                  {0, {SailStatus_init_default}}
#define SkipperCommand_init_zero                 {0, 0}
#define SailCommand_init_zero                    {0}
#define RudderCommand_init_zero                  {0}
#define Mode_init_zero                           {0}
#define BaseToBoat_init_zero                     {0, {SkipperCommand_init_zero}}
#define SailStatus_init_zero                     {0, 0}
#define PowerStatus_init_zero                    {0}
#define BoatToBase_init_zero                     {0, {SailStatus_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Mode_mode_tag                            1
#define PowerStatus_batteryVoltage_tag           1
#define RudderCommand_position_tag               1
#define SailCommand_position_tag                 1
#define SailStatus_sailPosition_tag              1
#define SailStatus_rudderPosition_tag            2
#define SkipperCommand_sailPosition_tag          1
#define SkipperCommand_rudderPosition_tag        2
#define BaseToBoat_skipper_tag                   1
#define BaseToBoat_sail_tag                      2
#define BaseToBoat_rudder_tag                    3
#define BaseToBoat_mode_tag                      5
#define BoatToBase_sails_tag                     1
#define BoatToBase_power_tag                     2

/* Struct field encoding specification for nanopb */
#define SkipperCommand_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, sailPosition, 1) \
X(a, STATIC, SINGULAR, SINT32, rudderPosition, 2)
#define SkipperCommand_CALLBACK NULL
#define SkipperCommand_DEFAULT NULL

#define SailCommand_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, position, 1)
#define SailCommand_CALLBACK NULL
#define SailCommand_DEFAULT NULL

#define RudderCommand_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, SINT32, position, 1)
#define RudderCommand_CALLBACK NULL
#define RudderCommand_DEFAULT NULL

#define Mode_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, mode, 1)
#define Mode_CALLBACK NULL
#define Mode_DEFAULT NULL

#define BaseToBoat_FIELDLIST(X, a) \
X(a, STATIC, ONEOF, MESSAGE, (command,skipper,command.skipper), 1) \
X(a, STATIC, ONEOF, MESSAGE, (command,sail,command.sail), 2) \
X(a, STATIC, ONEOF, MESSAGE, (command,rudder,command.rudder), 3) \
X(a, STATIC, ONEOF, MESSAGE, (command,mode,command.mode), 5)
#define BaseToBoat_CALLBACK NULL
#define BaseToBoat_DEFAULT NULL
#define BaseToBoat_command_skipper_MSGTYPE SkipperCommand
#define BaseToBoat_command_sail_MSGTYPE SailCommand
#define BaseToBoat_command_rudder_MSGTYPE RudderCommand
#define BaseToBoat_command_mode_MSGTYPE Mode

#define SailStatus_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, sailPosition, 1) \
X(a, STATIC, SINGULAR, SINT32, rudderPosition, 2)
#define SailStatus_CALLBACK NULL
#define SailStatus_DEFAULT NULL

#define PowerStatus_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, batteryVoltage, 1)
#define PowerStatus_CALLBACK NULL
#define PowerStatus_DEFAULT NULL

#define BoatToBase_FIELDLIST(X, a) \
X(a, STATIC, ONEOF, MESSAGE, (command,sails,command.sails), 1) \
X(a, STATIC, ONEOF, MESSAGE, (command,power,command.power), 2)
#define BoatToBase_CALLBACK NULL
#define BoatToBase_DEFAULT NULL
#define BoatToBase_command_sails_MSGTYPE SailStatus
#define BoatToBase_command_power_MSGTYPE PowerStatus

extern const pb_msgdesc_t SkipperCommand_msg;
extern const pb_msgdesc_t SailCommand_msg;
extern const pb_msgdesc_t RudderCommand_msg;
extern const pb_msgdesc_t Mode_msg;
extern const pb_msgdesc_t BaseToBoat_msg;
extern const pb_msgdesc_t SailStatus_msg;
extern const pb_msgdesc_t PowerStatus_msg;
extern const pb_msgdesc_t BoatToBase_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SkipperCommand_fields &SkipperCommand_msg
#define SailCommand_fields &SailCommand_msg
#define RudderCommand_fields &RudderCommand_msg
#define Mode_fields &Mode_msg
#define BaseToBoat_fields &BaseToBoat_msg
#define SailStatus_fields &SailStatus_msg
#define PowerStatus_fields &PowerStatus_msg
#define BoatToBase_fields &BoatToBase_msg

/* Maximum encoded size of messages (where known) */
#define SkipperCommand_size                      17
#define SailCommand_size                         11
#define RudderCommand_size                       6
#define Mode_size                                11
#define BaseToBoat_size                          19
#define SailStatus_size                          17
#define PowerStatus_size                         11
#define BoatToBase_size                          19

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
